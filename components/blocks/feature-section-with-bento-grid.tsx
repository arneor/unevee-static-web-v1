"use client";

import React from "react";
import Image from "next/image";
import createGlobe from "cobe";
import { useEffect, useRef, useMemo } from "react";
import { motion } from "framer-motion";
import { IconBrandYoutubeFilled } from "@tabler/icons-react";
import Link from "next/link";

function cn(...inputs: (string | undefined | null | boolean)[]) {
  return inputs.filter(Boolean).join(" ");
}

export function FeaturesSectionWithBentoGrid() {
  const features = [
    {
      title: "Track your fitness progress",
      description:
        "Monitor your workouts, set goals, and see your improvements over time with our comprehensive fitness tracker.",
      skeleton: <SkeletonOne />,
      className:
        "col-span-1 md:col-span-4 lg:col-span-4 border-b md:border-r border-neutral-800",
    },
    {
      title: "AI-powered workout plans",
      description:
        "Get personalized workout routines generated by our AI based on your fitness level and goals.",
      skeleton: <SkeletonTwo />,
      className:
        "col-span-1 md:col-span-2 lg:col-span-2 border-b border-neutral-800",
    },
    {
      title: "Watch training tutorials",
      description:
        "Access our library of professional training videos to perfect your form and technique.",
      skeleton: <SkeletonThree />,
      className:
        "col-span-1 md:col-span-3 lg:col-span-3 border-b md:border-r border-neutral-800",
    },
    {
      title: "Join global challenges",
      description:
        "Compete with athletes worldwide in our monthly fitness challenges and track your rankings in real-time.",
      skeleton: <SkeletonFour />,
      className:
        "col-span-1 md:col-span-3 lg:col-span-3 border-b md:border-none",
    },
  ];
  return (
    <div className="relative z-20 py-10 lg:py-40 max-w-7xl mx-auto bg-black">
      <div className="px-8">
        <h2 className="text-3xl lg:text-5xl lg:leading-tight max-w-5xl mx-auto text-center tracking-tight font-medium text-white">
          Elevate Your Fitness Journey
        </h2>

        <p className="text-sm lg:text-base max-w-2xl my-4 mx-auto text-neutral-400 text-center font-normal">
          From personalized training plans to global competitions, we provide
          everything you need to achieve your fitness goals. Track, train, and
          transform with our cutting-edge platform.
        </p>
      </div>

      <div className="relative">
        <div className="grid grid-cols-1 md:grid-cols-6 lg:grid-cols-6 mt-12 xl:border rounded-md border-neutral-800">
          {features.map((feature) => (
            <FeatureCard key={feature.title} className={feature.className}>
              <FeatureTitle>{feature.title}</FeatureTitle>
              <FeatureDescription>{feature.description}</FeatureDescription>
              <div className="h-full w-full">{feature.skeleton}</div>
            </FeatureCard>
          ))}
        </div>
      </div>
    </div>
  );
}

const FeatureCard = ({
  children,
  className,
}: {
  children?: React.ReactNode;
  className?: string;
}) => {
  return (
    <div className={cn(`p-4 sm:p-8 relative overflow-hidden`, className)}>
      {children}
    </div>
  );
};

const FeatureTitle = ({ children }: { children?: React.ReactNode }) => {
  return (
    <h3 className="max-w-5xl mx-auto text-left tracking-tight text-white text-xl md:text-2xl md:leading-snug">
      {children}
    </h3>
  );
};

const FeatureDescription = ({ children }: { children?: React.ReactNode }) => {
  return (
    <div
      className={cn(
        "text-sm md:text-base max-w-4xl text-left mx-auto",
        "text-neutral-400 text-center font-normal",
        "text-left max-w-sm mx-0 md:text-sm my-2"
      )}
    >
      {children}
    </div>
  );
};

export const SkeletonOne = () => {
  return (
    <div className="relative flex py-8 px-2 gap-10 h-full">
      <div className="w-full p-5 mx-auto bg-neutral-900 shadow-2xl group h-full">
        <div className="flex flex-1 w-full h-full flex-col space-y-2">
          <Image
            src="https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?q=80&w=3540&auto=format&fit=crop"
            alt="Fitness tracking"
            width={800}
            height={800}
            className="h-full w-full aspect-square object-cover object-center rounded-sm"
          />
        </div>
      </div>

      <div className="absolute bottom-0 z-40 inset-x-0 h-60 bg-gradient-to-t from-black via-black to-transparent w-full pointer-events-none" />
      <div className="absolute top-0 z-40 inset-x-0 h-60 bg-gradient-to-b from-black via-transparent to-transparent w-full pointer-events-none" />
    </div>
  );
};

export const SkeletonThree = () => {
  return (
    <Link
      href="https://www.youtube.com/watch?v=dQw4w9WgXcQ"
      target="__blank"
      className="relative flex gap-10 h-full group/image"
    >
      <div className="w-full mx-auto bg-transparent group h-full">
        <div className="flex flex-1 w-full h-full flex-col space-y-2 relative">
          <IconBrandYoutubeFilled className="h-20 w-20 absolute z-10 inset-0 text-red-500 m-auto" />
          <Image
            src="https://images.unsplash.com/photo-1544367567-0f2fcb009e0b?q=80&w=3620&auto=format&fit=crop"
            alt="Training video"
            width={800}
            height={800}
            className="h-full w-full aspect-square object-cover object-center rounded-sm blur-none group-hover/image:blur-md transition-all duration-200"
          />
        </div>
      </div>
    </Link>
  );
};

export const SkeletonTwo = () => {
  const images = [
    "https://images.unsplash.com/photo-1538805060514-97d9cc17730c?q=80&w=3540&auto=format&fit=crop",
    "https://images.unsplash.com/photo-1576678927484-cc907957088c?q=80&w=3474&auto=format&fit=crop",
    "https://images.unsplash.com/photo-1517836357463-d25dfeac3438?q=80&w=3540&auto=format&fit=crop",
    "https://images.unsplash.com/photo-1552674605-db6ffd4facb5?q=80&w=3540&auto=format&fit=crop",
    "https://images.unsplash.com/photo-1571019614242-c5c5dee9f50b?q=80&w=3540&auto=format&fit=crop",
  ];

  const imageVariants = {
    whileHover: {
      scale: 1.1,
      rotate: 0,
      zIndex: 100,
    },
    whileTap: {
      scale: 1.1,
      rotate: 0,
      zIndex: 100,
    },
  };
  // Deterministic rotations to avoid SSR/client mismatch
  const rotations = useMemo(
    () => images.map((_, idx) => ((idx * 13) % 20) - 10),
    [images.length]
  );
  return (
    <div className="relative flex flex-col items-start p-8 gap-10 h-full overflow-hidden">
      <div className="flex flex-row -ml-20">
        {images.map((image, idx) => (
          <motion.div
            variants={imageVariants}
            key={"images-first" + idx}
            style={{ rotate: rotations[idx] }}
            whileHover="whileHover"
            whileTap="whileTap"
            className="rounded-xl -mr-4 mt-4 p-1 bg-neutral-800 border-neutral-700 border flex-shrink-0 overflow-hidden"
          >
            <Image
              src={image}
              alt="AI-powered workout plan example"
              width="500"
              height="500"
              className="rounded-lg h-20 w-20 md:h-40 md:w-40 object-cover flex-shrink-0"
            />
          </motion.div>
        ))}
      </div>
      <div className="flex flex-row">
        {images.map((image, idx) => (
          <motion.div
            key={"images-second" + idx}
            style={{ rotate: rotations[idx] }}
            variants={imageVariants}
            whileHover="whileHover"
            whileTap="whileTap"
            className="rounded-xl -mr-4 mt-4 p-1 bg-neutral-800 border-neutral-700 border flex-shrink-0 overflow-hidden"
          >
            <Image
              src={image}
              alt="AI-powered workout plan example"
              width="500"
              height="500"
              className="rounded-lg h-20 w-20 md:h-40 md:w-40 object-cover flex-shrink-0"
            />
          </motion.div>
        ))}
      </div>

      <div className="absolute left-0 z-[100] inset-y-0 w-20 bg-gradient-to-r from-black to-transparent h-full pointer-events-none" />
      <div className="absolute right-0 z-[100] inset-y-0 w-20 bg-gradient-to-l from-black to-transparent h-full pointer-events-none" />
    </div>
  );
};

export const SkeletonFour = () => {
  return (
    <div className="h-60 md:h-60 flex flex-col items-center relative bg-transparent mt-10">
      <Globe className="absolute -right-10 md:-right-10 -bottom-80 md:-bottom-72" />
    </div>
  );
};

export const Globe = ({ className }: { className?: string }) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    let phi = 0;

    if (!canvasRef.current) return;

    const globe = createGlobe(canvasRef.current, {
      devicePixelRatio: 2,
      width: 600 * 2,
      height: 600 * 2,
      phi: 0,
      theta: 0,
      dark: 1,
      diffuse: 1.2,
      mapSamples: 16000,
      mapBrightness: 6,
      baseColor: [0.1, 0.1, 0.1],
      markerColor: [0.1, 0.8, 1],
      glowColor: [0.1, 0.1, 0.1],
      markers: [
        { location: [40.7128, -74.006], size: 0.1 }, // New York
        { location: [51.5074, -0.1278], size: 0.1 }, // London
        { location: [35.6762, 139.6503], size: 0.1 }, // Tokyo
        { location: [-33.8688, 151.2093], size: 0.1 }, // Sydney

        // India - Highlighted locations
        { location: [8.5241, 76.9366], size: 0.15 }, // Thiruvananthapuram, Kerala (larger size for emphasis)
        { location: [9.9312, 76.2673], size: 0.1 }, // Kochi, Kerala
        { location: [11.2588, 75.7804], size: 0.1 }, // Kozhikode, Kerala
        { location: [28.6139, 77.209], size: 0.12 }, // New Delhi
        { location: [19.076, 72.8777], size: 0.12 }, // Mumbai
        { location: [13.0827, 80.2707], size: 0.12 }, // Chennai
        { location: [12.9716, 77.5946], size: 0.12 }, // Bengaluru
        { location: [17.385, 78.4867], size: 0.12 }, // Hyderabad

        // GCC Countries
        { location: [24.7136, 46.6753], size: 0.12 }, // Riyadh, Saudi Arabia
        { location: [21.3891, 39.8579], size: 0.1 }, // Jeddah, Saudi Arabia
        { location: [25.2769, 55.2962], size: 0.12 }, // Dubai, UAE
        { location: [24.4539, 54.3773], size: 0.1 }, // Abu Dhabi, UAE
        { location: [26.0667, 50.5577], size: 0.12 }, // Manama, Bahrain
        { location: [25.2694, 55.3088], size: 0.1 }, // Sharjah, UAE
        { location: [29.3759, 47.9774], size: 0.12 }, // Kuwait City, Kuwait
        { location: [23.614, 58.5922], size: 0.12 }, // Muscat, Oman
        { location: [25.2854, 51.531], size: 0.12 }, // Doha, Qatar
      ],
      onRender: (state) => {
        state.phi = phi;
        phi += 0.01;
      },
    });

    return () => {
      globe.destroy();
    };
  }, []);

  return (
    <canvas
      ref={canvasRef}
      style={{ width: 600, height: 600, maxWidth: "100%", aspectRatio: 1 }}
      className={className}
    />
  );
};

function FeaturesSectionWithBentoGridDemo() {
  return (
    <div className="min-h-screen w-full bg-black">
      <div className="absolute top-0 left-0 w-full">
        <FeaturesSectionWithBentoGrid />
      </div>
    </div>
  );
}

export default FeaturesSectionWithBentoGridDemo;
